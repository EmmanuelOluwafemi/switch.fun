generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                     String         @id @default(uuid())
  username               String         @unique
  imageUrl               String
  externalUserId         String         @unique
  bio                    String?
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  solanaWallet           String?
  isSolanaPlatformWallet Boolean        @default(false)
  platformWallet         String?
  following              Follow[]       @relation("Following")
  followedBy             Follow[]       @relation("FollowedBy")
  blocking               Block[]        @relation("Blocking")
  blockedBy              Block[]        @relation("BlockedBy")
  stream                 Stream?
  interests              UserInterest[]
  tipsSent               Tip[]          @relation("TipsSent")
  tipsReceived           Tip[]          @relation("TipsReceived")
}

model Stream {
  id                  String     @id @default(uuid())
  name                String
  thumbnailUrl        String?
  ingressId           String?    @unique
  serverUrl           String?
  streamKey           String?
  isLive              Boolean    @default(false)
  isChatEnabled       Boolean    @default(true)
  isChatDelayed       Boolean    @default(false)
  isChatFollowersOnly Boolean    @default(false)
  userId              String     @unique
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  streamStartedAt     DateTime?
  views               Int        @default(0)
  streamType          StreamType @default(INGRESS)
  title               String?
  user                User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tips                Tip[]

  @@index([userId])
  @@index([ingressId])
  @@index([views])
  @@index([isLive, streamType])
  @@index([streamType])
}

model PlatformAnalytics {
  id                    String   @id @default(uuid())
  totalStreamsCreated   Int      @default(0)
  totalLiveStreams      Int      @default(0)
  totalStreamHours      Int      @default(0)
  totalUsers            Int      @default(0)
  totalStreamers        Int      @default(0)
  totalActiveStreamers  Int      @default(0)
  totalViews            Int      @default(0)
  totalWatchTimeMinutes Int      @default(0)
  peakConcurrentViewers Int      @default(0)
  totalFollows          Int      @default(0)
  totalChatMessages     Int      @default(0)
  totalBlocks           Int      @default(0)
  lastUpdated           DateTime @default(now()) @updatedAt
  createdAt             DateTime @default(now())
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  follower    User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Block {
  id        String @id @default(uuid())
  blockerId String
  blockedId String
  blocker   User   @relation("Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked   User   @relation("BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}

model Category {
  id            String        @id @default(uuid())
  name          String        @unique
  slug          String        @unique
  viewers       Int           @default(0)
  description   String?
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  subCategories SubCategory[]

  @@index([isActive])
  @@index([name])
  @@index([slug])
  @@index([isActive, name])
}

model SubCategory {
  id            String         @id @default(uuid())
  name          String
  slug          String         @unique
  imageUrl      String?
  viewers       Int            @default(0)
  description   String?
  isActive      Boolean        @default(true)
  categoryId    String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  category      Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  userInterests UserInterest[]

  @@unique([categoryId, name])
  @@index([categoryId])
  @@index([slug])
  @@index([isActive])
  @@index([categoryId, isActive])
  @@index([name])
}

model UserInterest {
  id            String      @id @default(uuid())
  userId        String
  subCategoryId String
  createdAt     DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)

  @@unique([userId, subCategoryId])
  @@index([userId])
  @@index([subCategoryId])
}

model Tip {
  id              String    @id @default(uuid())
  amount          Decimal
  tokenType       TokenType @default(USDC)
  giftType        String?
  giftName        String?
  tipperId        String
  streamerId      String
  streamId        String?
  transactionHash String?
  isProcessed     Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  tipper          User      @relation("TipsSent", fields: [tipperId], references: [id], onDelete: Cascade)
  streamer        User      @relation("TipsReceived", fields: [streamerId], references: [id], onDelete: Cascade)
  stream          Stream?   @relation(fields: [streamId], references: [id], onDelete: SetNull)

  @@index([tipperId])
  @@index([streamerId])
  @@index([streamId])
  @@index([createdAt])
  @@index([isProcessed])
  @@index([tokenType])
}

enum TokenType {
  USDC
  SOL
}

enum StreamType {
  INGRESS
  BROWSER
}
