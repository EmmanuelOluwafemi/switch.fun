generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id             String   @id @default(uuid())
  username       String   @unique
  imageUrl       String
  externalUserId String   @unique
  bio            String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  following      Follow[] @relation("Following")
  followedBy     Follow[] @relation("FollowedBy")
  blocking       Block[]  @relation("Blocking")
  blockedBy      Block[]  @relation("BlockedBy")
  stream         Stream?
}

model Stream {
  id                  String    @id @default(uuid())
  name                String
  thumbnailUrl        String?
  ingressId           String?   @unique
  serverUrl           String?
  streamKey           String?
  isLive              Boolean   @default(false)
  isChatEnabled       Boolean   @default(true)
  isChatDelayed       Boolean   @default(false)
  isChatFollowersOnly Boolean   @default(false)
  userId              String    @unique
  createdAt           DateTime  @default(now())
  streamStartedAt     DateTime?
  updatedAt           DateTime  @updatedAt
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([ingressId])
}

model PlatformAnalytics {
  id String @id @default(uuid())

  // Stream Metrics
  totalStreamsCreated Int @default(0)
  totalLiveStreams    Int @default(0)
  totalStreamHours    Int @default(0) // Total hours broadcasted across all streams

  // User Metrics  
  totalUsers           Int @default(0)
  totalStreamers       Int @default(0) // Users who have created at least one stream
  totalActiveStreamers Int @default(0) // Streamers who went live in last 30 days

  // Viewership Metrics
  totalViews            Int @default(0) // Total view sessions across all streams
  totalWatchTimeMinutes Int @default(0) // Total minutes watched across all streams
  peakConcurrentViewers Int @default(0) // Highest concurrent viewers across platform

  // Engagement Metrics
  totalFollows      Int @default(0)
  totalChatMessages Int @default(0)
  totalBlocks       Int @default(0)

  // Time tracking
  lastUpdated DateTime @default(now()) @updatedAt
  createdAt   DateTime @default(now())
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  follower    User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Block {
  id        String @id @default(uuid())
  blockerId String
  blockedId String
  blocker   User   @relation("Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked   User   @relation("BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}
